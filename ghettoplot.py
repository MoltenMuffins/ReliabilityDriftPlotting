#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 20, 2019 11:44:52 AM +0800  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import ghettoplot_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    # global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    # print ('prog_call = {}'.format(prog_call))
    prog_location = os.path.split(prog_call)[0]
    # print ('prog_location = {}'.format(prog_location))
    sys.stdout.flush()
    root = tk.Tk()
    ghettoplot_support.set_Tk_var()
    top = Toplevel1 (root)
    ghettoplot_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    # global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    print ('prog_call = {}'.format(prog_call))
    prog_location = os.path.split(prog_call)[0]
    print ('prog_location = {}'.format(prog_location))
    # rt = root
    w = tk.Toplevel (root)
    ghettoplot_support.set_Tk_var()
    top = Toplevel1 (w)
    ghettoplot_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
        top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("592x473+665+264")
        top.title("New Toplevel")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="#f0f0f0f0f0f0")
        top.configure(highlightcolor="black")

        self.IsRef = tk.Checkbutton(top)
        self.IsRef.place(relx=0.084, rely=0.423, relheight=0.066, relwidth=0.615)
        self.IsRef.configure(activebackground="#ffffff")
        self.IsRef.configure(activeforeground="#000000")
        self.IsRef.configure(background="#ffffff")
        self.IsRef.configure(disabledforeground="#a3a3a3")
        self.IsRef.configure(font="-family {Segoe UI} -size 9")
        self.IsRef.configure(foreground="#1e1e1e")
        self.IsRef.configure(highlightbackground="#d9d9d9")
        self.IsRef.configure(highlightcolor="black")
        self.IsRef.configure(justify='left')
        self.IsRef.configure(text='''Check box if the files are for a reference sample''')
        self.IsRef.configure(variable=ghettoplot_support.referencesamplecheck)
        tooltip_font = "TkDefaultFont"
        ToolTip(self.IsRef, tooltip_font, '''If files belong to a reference sample, please tick the box to have them indicated as such''', delay=0.5)

        self.SampleName = tk.Entry(top)
        self.SampleName.place(relx=0.507, rely=0.359,height=24, relwidth=0.361)
        self.SampleName.configure(background="#ececec")
        self.SampleName.configure(disabledforeground="#a3a3a3")
        self.SampleName.configure(font="TkFixedFont")
        self.SampleName.configure(foreground="#000000")
        self.SampleName.configure(highlightbackground="#d9d9d9")
        self.SampleName.configure(highlightcolor="black")
        self.SampleName.configure(insertbackground="black")
        self.SampleName.configure(selectbackground="#007878d7d777")
        self.SampleName.configure(selectforeground="#ffffffffffff")
        self.SampleName.configure(textvariable=ghettoplot_support.SampleNameTextEntry)
        tooltip_font = "TkDefaultFont"
        ToolTip(self.SampleName, tooltip_font, '''Please input a valid name for the sample. This will be used as the name as the compiled .csv file.''', delay=0.5)

        self.SampleNameLabel = tk.Label(top)
        self.SampleNameLabel.place(relx=0.101, rely=0.349, height=26, width=230)
        self.SampleNameLabel.configure(activebackground="#ffffff")
        self.SampleNameLabel.configure(activeforeground="black")
        self.SampleNameLabel.configure(background="#ffffff")
        self.SampleNameLabel.configure(disabledforeground="#a3a3a3")
        self.SampleNameLabel.configure(font="-family {Segoe UI} -size 9")
        self.SampleNameLabel.configure(foreground="#1e1e1e")
        self.SampleNameLabel.configure(highlightbackground="#d9d9d9")
        self.SampleNameLabel.configure(highlightcolor="black")
        self.SampleNameLabel.configure(text='''Enter Sample Name/RTO number:''')

        self.TestTypeFrame = tk.LabelFrame(top)
        self.TestTypeFrame.place(relx=0.118, rely=0.529, relheight=0.201
                , relwidth=0.76)
        self.TestTypeFrame.configure(relief='groove')
        self.TestTypeFrame.configure(font="-family {Segoe UI} -size 9")
        self.TestTypeFrame.configure(foreground="#1e1e1e")
        self.TestTypeFrame.configure(labelanchor="n")
        self.TestTypeFrame.configure(text='''Select Test Type''')
        self.TestTypeFrame.configure(background="#ffffff")
        self.TestTypeFrame.configure(highlightbackground="#d9d9d9")
        self.TestTypeFrame.configure(highlightcolor="black")
        self.TestTypeFrame.configure(width=450)

        self.NFTbutton = tk.Radiobutton(self.TestTypeFrame, value='NFT')
        self.NFTbutton.place(relx=0.044, rely=0.368, relheight=0.316
                , relwidth=0.267, bordermode='ignore')
        self.NFTbutton.configure(activebackground="#63a2ff")
        self.NFTbutton.configure(activeforeground="#63a2ff")
        self.NFTbutton.configure(background="#ececec")
        self.NFTbutton.configure(borderwidth="1")
        self.NFTbutton.configure(disabledforeground="#a3a3a3")
        self.NFTbutton.configure(foreground="#000000")
        self.NFTbutton.configure(highlightbackground="#63a2ff")
        self.NFTbutton.configure(highlightcolor="black")
        self.NFTbutton.configure(indicatoron="0")
        self.NFTbutton.configure(justify='left')
        self.NFTbutton.configure(offrelief="flat")
        self.NFTbutton.configure(selectcolor="#63a2ff")
        self.NFTbutton.configure(text='''NFT''')
        self.NFTbutton.configure(variable=ghettoplot_support.test_type_select)
        tooltip_font = "TkDefaultFont"
        ToolTip(self.NFTbutton, tooltip_font, '''Click to select files that are NFT''', delay=0.5)

        self.FFTbutton = tk.Radiobutton(self.TestTypeFrame, value='FFT')
        self.FFTbutton.place(relx=0.367, rely=0.368, relheight=0.316
                , relwidth=0.267, bordermode='ignore')
        self.FFTbutton.configure(activebackground="#63a2ff")
        self.FFTbutton.configure(activeforeground="#63a2ff")
        self.FFTbutton.configure(background="#ececec")
        self.FFTbutton.configure(borderwidth="1")
        self.FFTbutton.configure(disabledforeground="#a3a3a3")
        self.FFTbutton.configure(foreground="#000000")
        self.FFTbutton.configure(highlightbackground="#63a2ff")
        self.FFTbutton.configure(highlightcolor="black")
        self.FFTbutton.configure(indicatoron="0")
        self.FFTbutton.configure(justify='left')
        self.FFTbutton.configure(overrelief="flat")
        self.FFTbutton.configure(selectcolor="#63a2ff")
        self.FFTbutton.configure(text='''FFT''')
        self.FFTbutton.configure(variable=ghettoplot_support.test_type_select)
        tooltip_font = "TkDefaultFont"
        ToolTip(self.FFTbutton, tooltip_font, '''Click to select files that are FFT''', delay=0.5)

        self.LIVbutton = tk.Radiobutton(self.TestTypeFrame, value='LIV')
        self.LIVbutton.place(relx=0.678, rely=0.368, relheight=0.316
                , relwidth=0.267, bordermode='ignore')
        self.LIVbutton.configure(activebackground="#63a2ff")
        self.LIVbutton.configure(activeforeground="#63a2ff")
        self.LIVbutton.configure(background="#ececec")
        self.LIVbutton.configure(borderwidth="1")
        self.LIVbutton.configure(disabledforeground="#a3a3a3")
        self.LIVbutton.configure(foreground="#000000")
        self.LIVbutton.configure(highlightbackground="#63a2ff")
        self.LIVbutton.configure(highlightcolor="black")
        self.LIVbutton.configure(indicatoron="0")
        self.LIVbutton.configure(justify='left')
        self.LIVbutton.configure(offrelief="flat")
        self.LIVbutton.configure(selectcolor="#63a2ff")
        self.LIVbutton.configure(text='''LIV''')
        self.LIVbutton.configure(variable=ghettoplot_support.test_type_select)
        tooltip_font = "TkDefaultFont"
        ToolTip(self.LIVbutton, tooltip_font, '''Click to select files that are LIV''', delay=0.5)

        # self.AMSlabel = tk.Label(top)
        # self.AMSlabel.place(relx=0.304, rely=0.063, height=52, width=243)
        # self.AMSlabel.configure(activebackground="#ffffff")
        # self.AMSlabel.configure(activeforeground="black")
        # self.AMSlabel.configure(background="#ffffff")
        # self.AMSlabel.configure(disabledforeground="#a3a3a3")
        # self.AMSlabel.configure(foreground="#000000")
        # self.AMSlabel.configure(highlightbackground="#d9d9d9")
        # self.AMSlabel.configure(highlightcolor="black")
        # photo_location = os.path.join(prog_location,"ams.PNG")
        # self._img0 = tk.PhotoImage(file=photo_location)
        # self.AMSlabel.configure(image=self._img0)
        # self.AMSlabel.configure(text='''AMSlabel''')
        # tooltip_font = "TkDefaultFont"
        # ToolTip(self.AMSlabel, tooltip_font, '''By Evan Chong, Quality Intern''', delay=0.5)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.051, rely=0.19, height=56, width=552)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.Label3.configure(foreground="#3d3d3d")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''AMS TAMPINES RELIABILITY DRIFT ANALYSIS PLATFORM''')
        self.Label3.configure(wraplength="400")

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.338, rely=0.782, height=53, width=196)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#ececec")
        self.Button1.configure(command=ghettoplot_support.openfiledialogue)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(relief='flat')
        self.Button1.configure(text='''Select Files To Plot''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.Button1, tooltip_font, '''Click to open file selection dialogue window.''', delay=0.5)

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive 
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================
# How to use this class...
#   Copy the file tooltip.py into your working directory
#   import this into the _support python file created by Page
#   from tooltip import ToolTip
#   in the _support python file, create a function to attach each tooltip
#   to the widgets desired. Example:
#   ToolTip(self.widgetname, font, msg='Exit program', follow=False, delay=0.5)
# ======================================================
from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
        wdgt: The widget this ToolTip is assigned to
        tooltip_font: Font to be used
        msg:  A static string message assigned to the ToolTip
        msgFunc: A function that retrieves a string to use as the ToolTip text
        delay:   The delay in seconds before the ToolTip appears(may be float)
        follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
        event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
        event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
        event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()



